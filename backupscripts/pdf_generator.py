# pdf_generator.py

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from datetime import datetime
import os

class PDFGenerator:
    # __init__ no longer takes filename directly; it's handled in build
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.story = []

    def add_title(self, title):
        self.story.append(Paragraph(title, self.styles["Title"]))
        self.story.append(Spacer(1, 12))

    def add_heading(self, text, level=1):
        if level == 1:
            self.story.append(Paragraph(text, self.styles["h1"]))
        elif level == 2:
            self.story.append(Paragraph(text, self.styles["h2"]))
        else: # level 3+
            self.story.append(Paragraph(text, self.styles["h3"]))
        self.story.append(Spacer(1, 6))

    def add_paragraph(self, text):
        self.story.append(Paragraph(text, self.styles["BodyText"]))
        self.story.append(Spacer(1, 12))

    # build method now explicitly returns the generated file path
    def build(self, original_text: str, analysis_result: dict, output_dir: str = "reports") -> str:
        # Clear story for each new report generated by this instance
        self.story = [] 

        os.makedirs(output_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        # Sanitize filename part from original text, limiting to 50 chars for practical filenames
        safe_filename_part = original_text[:50].replace(" ", "_").replace(".", "").replace(",", "").replace("/", "").replace("\\", "").replace(":", "") 
        pdf_filename_full_path = os.path.join(output_dir, f"report_{safe_filename_part}_{timestamp}.pdf")
        
        # Initialize SimpleDocTemplate here, just before building
        doc = SimpleDocTemplate(pdf_filename_full_path, pagesize=letter) 

        self.add_title("Document Analysis Report")
        self.add_paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.story.append(Spacer(1, 24))

        self.add_heading("Original Document Snippet:", level=2)
        # Displaying a snippet of the original text, or full text if short
        display_text = original_text if len(original_text) < 500 else original_text[:500] + "..."
        self.add_paragraph(f"\" {display_text} \"")
        self.story.append(Spacer(1, 18))

        self.add_heading("Analysis Results:", level=2)
        
        sentiment_label = analysis_result['sentiment']
        if sentiment_label == 'POSITIVE':
            sentiment_display = f"<font color='green'><b>{sentiment_label}</b></font>"
        elif sentiment_label == 'NEGATIVE':
            sentiment_display = f"<font color='red'><b>{sentiment_label}</b></font>"
        else: # NEUTRAL or other
            sentiment_display = f"<font color='blue'><b>{sentiment_label}</b></font>"

        self.add_paragraph(f"• Sentiment: {sentiment_display} (Confidence: {analysis_result['confidence']:.2f})")
        self.add_paragraph(f"• Summary: {analysis_result['summary']}")
        self.story.append(Spacer(1, 24))

        print(f"Generating PDF report: {pdf_filename_full_path}")
        doc.build(self.story) # Build using the local 'doc' variable
        print("PDF report generated successfully.")
        
        return pdf_filename_full_path # RETURN THE FULL PATH

if __name__ == "__main__":
    # Example usage for PDFGenerator standalone
    sample_result = {
        "sentiment": "POSITIVE",
        "confidence": 0.99,
        "summary": "This is a brief summary of a very positive document."
    }
    sample_original_text = "This is the original text that was analyzed. It's a longer text to demonstrate the summary and sentiment. The product was amazing and exceeded expectations, truly revolutionizing the market."
    
    pdf = PDFGenerator() # No filename in init now
    pdf_path = pdf.build(sample_original_text, sample_result, output_dir="sample_reports")
    print(f"Example PDF generated at: {pdf_path}")